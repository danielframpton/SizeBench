<navigation:SizeBenchPage
      x:Class="SizeBench.GUI.Pages.Symbols.CodeBlockSymbolDiffPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:converters="clr-namespace:SizeBench.GUI.Converters"
      xmlns:commands="clr-namespace:SizeBench.GUI.Commands"
      xmlns:drawing="clr-namespace:System.Drawing;assembly=System.Drawing"
      xmlns:navigation="clr-namespace:SizeBench.GUI.Controls.Navigation"
      xmlns:symbols="clr-namespace:SizeBench.AnalysisEngine.Symbols;assembly=SizeBench.AnalysisEngine"
      mc:Ignorable="d" 
      d:DesignHeight="800" d:DesignWidth="800"
      Title="{Binding PageTitle}">
    <Grid>
        <Grid.Resources>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="0,0,5,3"/>
            </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock TextWrapping="Wrap" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="3"
                   Margin="10"
                   Visibility="{Binding BlocksOfDifferentTypeWarningText, Converter={x:Static converters:NullToCollapsedConverter.Instance}}">
            <InlineUIContainer>
                <Image Source="{Binding Source={x:Static drawing:SystemIcons.Warning},
                                Converter={x:Static converters:IconToImageSourceConverter.Instance},
                                Mode=OneWay}" Width="15" />
            </InlineUIContainer>
            <Run Text="{Binding BlocksOfDifferentTypeWarningText, Mode=OneWay}"/>
            <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                       CommandParameter="{Binding ParentFunctionSymbolDiff}">
                <TextBlock Text="click here to diff the entire function between binaries." />
            </Hyperlink>
        </TextBlock>

        <TextBlock Grid.Column="0" Grid.Row="1" Text="Symbol in 'Before' binary" FontSize="20"/>

        <TextBlock Grid.Column="1" Grid.Row="1" Text="Symbol in 'After' binary" FontSize="20"/>

        <ScrollViewer Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="2" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0" Visibility="{Binding DoesBeforeSymbolExist, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}, ConverterParameter=Reverse}"
                      d:Visibility="Collapsed">
                    <TextBlock TextWrapping="Wrap" Text="This symbol does not exist in the 'before' binary."/>
                </Grid>
                <Grid Grid.Column="0" Visibility="{Binding DoesBeforeSymbolExist, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Symbol is in Binary Section: "/>
                    <TextBlock Grid.Column="1" Grid.Row="0" DataContext="{Binding BeforePlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                   CommandParameter="{Binding BinarySection}">
                            <TextBlock Text="{Binding BinarySection.Name}" />
                        </Hyperlink>
                        <Run Text="{Binding BinarySection, Mode=OneWay, Converter={x:Static converters:BinarySectionToDescriptionConverter.Instance}, StringFormat=({0})}"/>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="1" Text="Symbol is in COFF Group: "/>
                    <TextBlock Grid.Column="1" Grid.Row="1" DataContext="{Binding BeforePlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding COFFGroup}">
                            <TextBlock Text="{Binding COFFGroup.Name}" />
                        </Hyperlink>
                        <Run Text="{Binding COFFGroup, Mode=OneWay, Converter={x:Static converters:COFFGroupToDescriptionConverter.Instance}, StringFormat=({0})}"/>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="2" Text="Symbol is in Lib: "/>
                    <TextBlock Grid.Column="1" Grid.Row="2" DataContext="{Binding BeforePlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                   CommandParameter="{Binding Lib}"
                                   ToolTip="{Binding Lib.Name}">
                            <TextBlock Text="{Binding Lib.ShortName}" />
                        </Hyperlink>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="3" Text="Symbol is in Compiland: "/>
                    <TextBlock Grid.Column="1" Grid.Row="3" DataContext="{Binding BeforePlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding Compiland}"
                                    ToolTip="{Binding Compiland.Name}">
                            <TextBlock Text="{Binding Compiland.ShortName}" />
                        </Hyperlink>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="4" Text="Symbol is in Source File: "/>
                    <TextBlock Grid.Column="1" Grid.Row="4" DataContext="{Binding BeforePlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding SourceFile}"
                                    ToolTip="{Binding SourceFile.Name}">
                            <TextBlock Text="{Binding SourceFile.ShortName}" />
                        </Hyperlink>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="5" Text="Name:"/>
                    <TextBlock Grid.Column="1" Grid.Row="5" TextWrapping="Wrap" Text="{Binding SymbolDiff.BeforeSymbol.Name, Mode=OneWay, Converter={x:Static converters:SymbolNameToFriendlyNameConverter.Instance}}"/>

                    <TextBlock Grid.Column="0" Grid.Row="6" Text="RVA (Start-End):"/>
                    <TextBlock Grid.Column="1" Grid.Row="6" FontFamily="Consolas">
                        <Run Text="{Binding SymbolDiff.BeforeSymbol.RVA, Mode=OneWay, StringFormat=0x{0:X}}"/><Run Text=" - "/><Run Text="{Binding SymbolDiff.BeforeSymbol.RVAEnd, Mode=OneWay, StringFormat=0x{0:X}}"/>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="7" Text="Size on Disk:"/>
                    <TextBlock Grid.Column="1" Grid.Row="7" Text="{Binding SymbolDiff.BeforeSymbol.Size, Mode=OneWay,Converter={x:Static converters:SizeToFriendlySizeConverter.Instance}}"/>

                    <TextBlock Grid.Column="0" Grid.Row="8" Text="Size in Memory:"/>
                    <TextBlock Grid.Column="1" Grid.Row="8" Text="{Binding SymbolDiff.BeforeSymbol.VirtualSize, Mode=OneWay,Converter={x:Static converters:SizeToFriendlySizeConverter.Instance}}"/>

                    <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="9" TextWrapping="Wrap"
                               Visibility="{Binding IsBeforeParentFunctionComplex, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                        <Run>This code block is part of a function that contains</Run>
                        <Run Text="{Binding ParentFunctionSymbolDiff.BeforeSymbol.Blocks.Count, Mode=OneWay}"/>
                        <Run>blocks of code.  Click the link below to view the diff of the entire "parent" function.</Run>
                    </TextBlock>
                    <TextBlock Grid.Column="0" Grid.Row="10" Text="Parent Function:"
                               Visibility="{Binding IsBeforeParentFunctionComplex, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}"/>
                    <TextBlock Grid.Column="1" Grid.Row="10" TextWrapping="Wrap"
                               Visibility="{Binding IsBeforeParentFunctionComplex, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                   CommandParameter="{Binding ParentFunctionSymbolDiff}"
                                   ToolTip="{Binding ParentFunctionSymbolDiff.FullName}">
                            <TextBlock Text="{Binding ParentFunctionSymbolDiff.FullName}" />
                        </Hyperlink>
                    </TextBlock>

                    <StackPanel Grid.ColumnSpan="2" Grid.Row="11" Visibility="{Binding IsBeforeBlockCodeUsedForMultipleBlocks, Mode=OneWay, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                        <TextBlock TextWrapping="Wrap" Margin="0,10,0,0">
                            This block of code is used for multiple functions due to Identical COMDAT Folding (ICF).  The linker determined that all these blocks contained identical bytes of code,
                            so they were folded together to improve performance and disk footprint.  This is a good thing!  But it can make names confusing sometimes, as well as understanding
                            what source file, compiland, or lib contributed this code to the binary.
                            <LineBreak/>
                            <LineBreak/>
                            Note that the linker has thrown away information by the time SizeBench sees things, so the compiland, lib, and source file that the bytes are attributed to is
                            essentially random among the list of blocks shown below.  So don't be surprised or confused if foo.obj is where the bytes are attributed, even though the parent function
                            is clearly in a different translation unit - SizeBench is doing the best it can, but the point is these bytes folded together and the cost needs to be attributed somewhere.
                            <LineBreak/>
                            <LineBreak/>
                            This is the list of the <Run Text="{Binding BeforeFoldedBlocks.Count, Mode=OneWay}"/> blocks that all share these bytes of code, in alphabetical order:
                        </TextBlock>

                        <ItemsControl Margin="0,3,0,0" ItemsSource="{Binding BeforeFoldedBlocks}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type symbols:CodeBlockSymbol}">
                                    <TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </Grid>

                <Rectangle Fill="Black" Width="2" Margin="5" VerticalAlignment="Stretch" Grid.Column="1"/>

                <Grid Grid.Column="2" Visibility="{Binding DoesAfterSymbolExist, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}, ConverterParameter=Reverse}"
                      d:Visibility="Collapsed">
                    <TextBlock TextWrapping="Wrap" Text="This symbol does not exist in the 'after' binary."/>
                </Grid>
                <Grid Grid.Column="2" Visibility="{Binding DoesAfterSymbolExist, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Symbol is in Binary Section: "/>
                    <TextBlock Grid.Column="1" Grid.Row="0" DataContext="{Binding AfterPlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding BinarySection}">
                            <TextBlock Text="{Binding BinarySection.Name}" />
                        </Hyperlink>
                        <Run Text="{Binding BinarySection, Mode=OneWay, Converter={x:Static converters:BinarySectionToDescriptionConverter.Instance}, StringFormat=({0})}"/>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="1" Text="Symbol is in COFF Group: "/>
                    <TextBlock Grid.Column="1" Grid.Row="1" DataContext="{Binding AfterPlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding COFFGroup}">
                            <TextBlock Text="{Binding COFFGroup.Name}" />
                        </Hyperlink>
                        <Run Text="{Binding COFFGroup, Mode=OneWay, Converter={x:Static converters:COFFGroupToDescriptionConverter.Instance}, StringFormat=({0})}"/>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="2" Text="Symbol is in Lib: "/>
                    <TextBlock Grid.Column="1" Grid.Row="2" DataContext="{Binding AfterPlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                   CommandParameter="{Binding Lib}"
                                   ToolTip="{Binding Lib.Name}">
                            <TextBlock Text="{Binding Lib.ShortName}" />
                        </Hyperlink>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="3" Text="Symbol is in Compiland: "/>
                    <TextBlock Grid.Column="1" Grid.Row="3" DataContext="{Binding AfterPlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding Compiland}"
                                    ToolTip="{Binding Compiland.Name}">
                            <TextBlock Text="{Binding Compiland.ShortName}" />
                        </Hyperlink>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="4" Text="Symbol is in Source File: "/>
                    <TextBlock Grid.Column="1" Grid.Row="4" DataContext="{Binding AfterPlacement}" TextWrapping="Wrap">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                    CommandParameter="{Binding SourceFile}"
                                    ToolTip="{Binding SourceFile.Name}">
                            <TextBlock Text="{Binding SourceFile.ShortName}" />
                        </Hyperlink>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="5" Text="Name:"/>
                    <TextBlock Grid.Column="1" Grid.Row="5" TextWrapping="Wrap" Text="{Binding SymbolDiff.AfterSymbol.Name, Mode=OneWay, Converter={x:Static converters:SymbolNameToFriendlyNameConverter.Instance}}"/>

                    <TextBlock Grid.Column="0" Grid.Row="6" Text="RVA (Start-End):"/>
                    <TextBlock Grid.Column="1" Grid.Row="6" FontFamily="Consolas">
                        <Run Text="{Binding SymbolDiff.AfterSymbol.RVA, Mode=OneWay, StringFormat=0x{0:X}}"/><Run Text=" - "/><Run Text="{Binding SymbolDiff.AfterSymbol.RVAEnd, Mode=OneWay, StringFormat=0x{0:X}}"/>
                    </TextBlock>

                    <TextBlock Grid.Column="0" Grid.Row="7" Text="Size on Disk:"/>
                    <TextBlock Grid.Column="1" Grid.Row="7" Text="{Binding SymbolDiff.AfterSymbol.Size, Mode=OneWay,Converter={x:Static converters:SizeToFriendlySizeConverter.Instance}}"/>

                    <TextBlock Grid.Column="0" Grid.Row="8" Text="Size in Memory:"/>
                    <TextBlock Grid.Column="1" Grid.Row="8" Text="{Binding SymbolDiff.AfterSymbol.VirtualSize, Mode=OneWay,Converter={x:Static converters:SizeToFriendlySizeConverter.Instance}}"/>

                    <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="9" TextWrapping="Wrap"
                               Visibility="{Binding IsAfterParentFunctionComplex, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                        <Run>This code block is part of a function that contains</Run>
                        <Run Text="{Binding ParentFunctionSymbolDiff.AfterSymbol.Blocks.Count, Mode=OneWay}"/>
                        <Run>blocks of code.  Click the link below to view the diff of the entire "parent" function.</Run>
                    </TextBlock>
                    <TextBlock Grid.Column="0" Grid.Row="10" Text="Parent Function:"
                               Visibility="{Binding IsAfterParentFunctionComplex, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}"/>
                    <TextBlock Grid.Column="1" Grid.Row="10" TextWrapping="Wrap"
                               Visibility="{Binding IsAfterParentFunctionComplex, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                        <Hyperlink Command="{x:Static commands:AppCommands.NavigateToModel}"
                                   CommandParameter="{Binding ParentFunctionSymbolDiff}"
                                   ToolTip="{Binding ParentFunctionSymbolDiff.FullName}">
                            <TextBlock Text="{Binding ParentFunctionSymbolDiff.FullName}" />
                        </Hyperlink>
                    </TextBlock>

                    <StackPanel Grid.ColumnSpan="2" Grid.Row="11" Visibility="{Binding IsAfterBlockCodeUsedForMultipleBlocks, Mode=OneWay, Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}">
                        <TextBlock TextWrapping="Wrap" Margin="0,10,0,0">
                            This block of code is used for multiple functions due to Identical COMDAT Folding (ICF).  The linker determined that all these blocks contained identical bytes of code,
                            so they were folded together to improve performance and disk footprint.  This is a good thing!  But it can make names confusing sometimes, as well as understanding
                            what source file, compiland, or lib contributed this code to the binary.
                            <LineBreak/>
                            <LineBreak/>
                            Note that the linker has thrown away information by the time SizeBench sees things, so the compiland, lib, and source file that the bytes are attributed to is
                            essentially random among the list of blocks shown below.  So don't be surprised or confused if foo.obj is where the bytes are attributed, even though the parent function
                            is clearly in a different translation unit - SizeBench is doing the best it can, but the point is these bytes folded together and the cost needs to be attributed somewhere.
                            <LineBreak/>
                            <LineBreak/>
                            This is the list of the <Run Text="{Binding AfterFoldedBlocks.Count, Mode=OneWay}"/> blocks that all share these bytes of code, in alphabetical order:
                        </TextBlock>

                        <ItemsControl Margin="0,3,0,0" ItemsSource="{Binding AfterFoldedBlocks}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type symbols:CodeBlockSymbol}">
                                    <TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </Grid>
            </Grid>
        </ScrollViewer>
    </Grid>
</navigation:SizeBenchPage>