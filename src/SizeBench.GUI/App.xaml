<Application x:Class="SizeBench.GUI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:behaviors="clr-namespace:SizeBench.GUI.Behaviors"
             xmlns:commands="clr-namespace:SizeBench.GUI.Commands"
             xmlns:controls="clr-namespace:SizeBench.GUI.Controls"
             xmlns:converters="clr-namespace:SizeBench.GUI.Converters">
    <Application.Resources>
        <Style x:Key="SizeBenchWindowStyle" TargetType="Window">
            <Setter Property="Icon" Value="Images/Square150x150Logo.scale-200.png"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="11"/>
        </Style>

        <Style TargetType="TextBlock" x:Key="HeaderStyle">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="TextDecorations" Value="Underline"/>
        </Style>
        
        
        <Style TargetType="TextBlock" x:Key="HeaderL2Style">
            <Setter Property="FontSize" Value="16"/>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="RightAlignedTextStyle">
            <Setter Property="HorizontalAlignment" Value="Right" />
        </Style>

        <!-- Default style for ScrollViewer that ensures nested/chained scrolling actually works throughout the app -->
        <Style TargetType="{x:Type ScrollViewer}">
            <Setter Property="controls:ScrollViewerImprovements.EnableScrollChaining" Value="True" />
        </Style>

        <!-- Default style for DataGrid since pretty much every DataGrid in SizeBench wants all these properties set this way -->
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="CanUserAddRows" Value="False"/>
            <Setter Property="CanUserDeleteRows" Value="False"/>
            <Setter Property="CanUserResizeRows" Value="False"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="IsSynchronizedWithCurrentItem" Value="True"/>
            <Setter Property="SelectionMode" Value="Single"/>
        </Style>
        
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        
        <Style x:Key="ExportToExcelButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="4,2,4,2"/>
            <Setter Property="Margin" Value="2,5,0,5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.Content>
                                    <StackPanel Orientation="Horizontal">
                                        <Image Width="16" Height="16">
                                            <Image.Source>
                                                <BitmapImage UriSource="/Images/excel_icon.png"
                                                         DecodePixelWidth="32" DecodePixelHeight="32"/>
                                            </Image.Source>
                                        </Image>
                                        <TextBlock Text="Export To Excel" Margin="3,0"/>
                                    </StackPanel>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="DataGrid" x:Key="SymbolPlacementDataGridStyle" x:Shared="False">
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="CanUserAddRows" Value="False"/>
            <Setter Property="CanUserDeleteRows" Value="False"/>
            <Setter Property="CanUserResizeRows" Value="False"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="IsSynchronizedWithCurrentItem" Value="True"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="behaviors:DataGridExtension.Columns">
                <Setter.Value>
                    <CompositeCollection>
                        <DataGridTemplateColumn Header="RVA Range" SortMemberPath="Key.RVA" SortDirection="Ascending">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock FontFamily="Consolas">
                                    <Run Text="{Binding Key.RVA, Mode=OneWay, StringFormat=0x{0:X8}}"/><Run Text=" - "/><Run Text="{Binding Key.RVAEnd, Mode=OneWay, StringFormat=0x{0:X8}}"/>
                                    </TextBlock>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn Header="Size" Binding="{Binding Key.Size, Converter={x:Static converters:SizeToFriendlySizeConverter.Instance}}"
                                            ElementStyle="{StaticResource RightAlignedTextStyle}"/>
                        <controls:SizeBenchDataGridHyperlinkColumn Header="Section"
                                                                   CommandParameterBinding="{Binding Value.BinarySection}"
                                                                   HyperlinkTextBinding="{Binding Value.BinarySection.Name}"
                                                                   HyperlinkToolTipBinding="{Binding Value.BinarySection, Converter={x:Static converters:BinarySectionToDescriptionConverter.Instance}}"/>
                        <controls:SizeBenchDataGridHyperlinkColumn Header="COFF Group"
                                                                   CommandParameterBinding="{Binding Value.COFFGroup}"
                                                                   HyperlinkTextBinding="{Binding Value.COFFGroup.Name}"
                                                                   HyperlinkToolTipBinding="{Binding Value.COFFGroup, Converter={x:Static converters:COFFGroupToDescriptionConverter.Instance}}"/>
                        <controls:SizeBenchDataGridHyperlinkColumn Header="Lib"
                                                                   CommandParameterBinding="{Binding Value.Lib}"
                                                                   HyperlinkTextBinding="{Binding Value.Lib.ShortName}"
                                                                   HyperlinkToolTipBinding="{Binding Value.Lib.Name}"/>
                        <controls:SizeBenchDataGridHyperlinkColumn Header="Compiland"
                                                                   CommandParameterBinding="{Binding Value.Compiland}"
                                                                   HyperlinkTextBinding="{Binding Value.Compiland.ShortName}"
                                                                   HyperlinkToolTipBinding="{Binding Value.Compiland.Name}"/>
                        <controls:SizeBenchDataGridHyperlinkColumn Header="Source File"
                                                                   CommandParameterBinding="{Binding Value.SourceFile}"
                                                                   HyperlinkTextBinding="{Binding Value.SourceFile.ShortName}"
                                                                   HyperlinkToolTipBinding="{Binding Value.SourceFile.Name}"/>
                        <controls:SizeBenchDataGridHyperlinkColumn Header="Name"
                                                                   CommandParameterBinding="{Binding Key}"
                                                                   HyperlinkTextBinding="{Binding Key.Name}"/>
                    </CompositeCollection>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Expander to look more modern, and all the things it refers to - note that this Expander only supports ExpandDirection="Down" since that's all SizeBench uses -->
        <!--#region Expander -->
        <SolidColorBrush x:Key="Expander.Static.Border.BorderBrush" Color="#FF333333"/>
        <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Border.BorderBrush" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Border.Background" Color="#FFCBD2D8"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="Expander.Pressed.Border.BorderBrush" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="Expander.Disabled.Border.BorderBrush" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="Black"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="border" HorizontalAlignment="Center" Height="19" Width="19" BorderBrush="{StaticResource Expander.Static.Border.BorderBrush}"
                                        VerticalAlignment="Center" CornerRadius="2"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" StrokeThickness="2" 
                                      Stroke="{StaticResource Expander.Static.Arrow.Stroke}" VerticalAlignment="Center"/>
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Expander.MouseOver.Border.BorderBrush}"/>
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Expander.MouseOver.Border.Background}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Expander.Pressed.Border.BorderBrush}"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="1.5"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Expander.Disabled.Border.BorderBrush}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" SnapsToDevicePixels="true">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                              Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              DockPanel.Dock="Top" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                              FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                              FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              MinHeight="0" MinWidth="0" Margin="1" Padding="{TemplateBinding Padding}"
                                              Style="{StaticResource ExpanderDownHeaderStyle}"/>
                                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" Visibility="Collapsed"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
    </Application.Resources>
</Application>
